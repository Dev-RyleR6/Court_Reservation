Court Reservation System - UI Structure and Database Interaction
===========================================================

1. UI Architecture
-----------------
The application uses Java Swing for its user interface, organized into several key frames:

1.1 Login Frame (src/ui/LoginFrame.java)
-------------------------------------
Entry point of the application
Components:
- Username field
- Password field
- Login button

Database Interaction:
- Uses AccountDAO.login() to authenticate users
- On successful login, redirects to appropriate dashboard based on user role
- Handles login errors and inactive account states

1.2 Dashboard Frames
------------------
Two types of dashboards based on user role:

A. Admin Dashboard (src/ui/AdminDashboardFrame.java)
------------------------------------------------
Components:
- Welcome header with admin info
- Action cards for:
  * Manage Reservations
  * Manage Users
  * Manage Courts
  * Logout
- Status bar

Database Interaction:
- Loads admin account info on initialization
- No direct database calls (actions open other frames)

B. Reserver Dashboard (src/ui/ReserverDashboardFrame.java)
-------------------------------------------------------
Components:
- Welcome header with user info
- Action cards for:
  * Reserve Court
  * My Reservations
  * Account Info
  * Logout
- Status bar

Database Interaction:
- Loads user account info on initialization
- No direct database calls (actions open other frames)

1.3 Management Frames
-------------------

A. User Management (src/ui/UserManagementFrame.java)
------------------------------------------------
Components:
- Search field
- Status filter dropdown
- User table with columns:
  * ID
  * Username
  * First Name
  * Last Name
  * Email
  * Role
  * Status
- Action buttons (Activate/Deactivate)

Database Interaction:
- Uses AccountDAO.getAllAccounts() to load user list
- Uses AccountDAO.updateAccountStatus() for status changes
- Implements search and filter functionality in memory

B. Court Management (src/ui/CourtManagementFrame.java)
--------------------------------------------------
Components:
- Search field
- Court type filter
- Court table
- Action buttons for court operations

Database Interaction:
- Uses CourtDAO.getAllCourts() to load court list
- Uses CourtDAO for CRUD operations
- Implements search and filter functionality

C. Reservation Management (src/ui/ReservationManagementFrame.java)
--------------------------------------------------------------
Components:
- Date filter
- Status filter
- Search field
- Reservation table with detailed information
- Action buttons (Approve/Reject)

Database Interaction:
- Uses ReservationDAO.getAllReservationsWithDetails() for comprehensive data
- Handles reservation status updates
- Implements filtering and search

1.4 Reservation Form (src/ui/ReservationForm.java)
-----------------------------------------------
Components:
- Court selection (combo box)
- Date selection (spinner + calendar)
- Time selection (combo box)
- Duration selection (spinner)
- Purpose text area
- Availability indicator
- Submit/Cancel buttons

Database Interaction:
- Uses CourtDAO.getAllCourts() to populate court list
- Uses CourtDAO.isCourtAvailable() for real-time availability checks
- Uses ReservationDAO.createReservation() to save new reservations
- Implements validation before submission

1.5 My Reservations (src/ui/MyReservationsFrame.java)
-------------------------------------------------
Components:
- Filter dropdown (All/Upcoming/Past/Pending/Approved)
- Reservation table
- Action buttons

Database Interaction:
- Uses ReservationDAO to fetch user-specific reservations
- Implements filtering based on status and date

2. Data Flow Patterns
--------------------
1. Initial Load Pattern:
   - Frame constructor initializes UI components
   - DAO methods called to fetch initial data
   - Data displayed in tables or form fields
   - Error handling with user feedback

2. Real-time Updates:
   - Availability checking in ReservationForm
   - Status updates in management frames
   - Search and filter operations

3. Form Submission Pattern:
   - Validate user input
   - Check business rules (e.g., availability)
   - Call appropriate DAO method
   - Handle success/failure
   - Provide user feedback
   - Close form on success

3. UI Design Patterns
--------------------
1. Color Scheme:
   - Consistent across all frames
   - PRIMARY_COLOR: Dark gray (51, 51, 51)
   - BACKGROUND_COLOR: Light gray (245, 245, 245)
   - ACCENT_COLOR: Steel blue (70, 130, 180)
   - SUCCESS_COLOR: Green (40, 167, 69)
   - DANGER_COLOR: Red (220, 53, 69)

2. Layout Patterns:
   - BorderLayout for main containers
   - GridLayout for card-based layouts
   - FlowLayout for button panels
   - BoxLayout for vertical stacking
   - Custom panels for specific components

3. Component Styling:
   - Consistent fonts (SansSerif)
   - Standardized button styles
   - Card-based design for dashboards
   - Responsive tables with custom renderers
   - Clear visual hierarchy

4. Error Handling
----------------
1. Database Errors:
   - Caught and displayed in user-friendly messages
   - Logged for debugging
   - Graceful fallbacks where possible

2. Validation Errors:
   - Input validation before database operations
   - Clear error messages
   - Visual indicators for invalid fields

3. Business Rule Errors:
   - Availability conflicts
   - Status restrictions
   - User permission issues

5. Future UI Improvements
------------------------
1. Enhanced User Experience:
   - Add loading indicators for database operations
   - Implement pagination for large data sets
   - Add tooltips for better guidance
   - Improve mobile responsiveness

2. Visual Enhancements:
   - Add icons for better visual cues
   - Implement dark mode
   - Add animations for transitions
   - Improve table sorting and filtering

3. Functionality:
   - Add export functionality for reports
   - Implement drag-and-drop for scheduling
   - Add calendar view for reservations
   - Implement real-time notifications 